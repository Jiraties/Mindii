import { useState } from "react";
import { View, Text, StyleSheet, Alert, Modal } from "react-native";
import { useNavigation } from "@react-navigation/native";
import { useDispatch, useSelector } from "react-redux";

import CustomButton from "../components/CustomButton";
import RootContainer from "../components/RootContainer";
import SelectSymptom from "../components/diagnosisPages/SelectSymptom";
import SelectOptions from "../components/diagnosisPages/SelectOptions";
import Conclusions from "./Conclusions";
import LottieView from "lottie-react-native";
import DiagnosisIntro from "../components/DiagnosisIntro";
import { ErrorBoundary } from "react-error-boundary";
import { conclusionActions } from "../context/conclusionSlice";
import { Fonts } from "../constants/styles";
import { StackNavigation } from "../../App";
import { RootState } from "../context/store";
import {
  diagnosisDataType,
  diagnosisOption,
  screenType,
  symptom,
  symptomLength,
} from "../models/diagnosisTypes";

let diagnosisData: diagnosisDataType = {
  screenIndex: 0,
  screenType: ["diagnosisIntro"],
  options: [],
  optionsSettings: { checklist: false, header: "", subheader: "" },
  latestQuestion: "",
  scoring: {
    somatic: 0,
    anxietyAndInsomnia: 0,
    socialDysfunction: 0,
    severeDepression: 0,
  },
};

const logDiagnosisData = () => {
  console.log(diagnosisData);
  // console.log(
  //   `
  //   --------------------------
  //   screenIndex: ${diagnosisData.screenIndex},
  //   screenType: ${diagnosisData.screenType},
  //   options: ${JSON.stringify(diagnosisData.options)},
  //   optionsSettings: ${JSON.stringify(diagnosisData.optionsSettings)},
  //   symptomList: ${JSON.stringify(diagnosisData.symptomList)},
  //   selectedOptionList: ${JSON.stringify(diagnosisData.selectedOptionList)}
  //   points:
  //   --------------------------
  //   `
  // );
};

const ghq28Questions = [
  {
    question: "‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß ‡∏õ‡∏ß‡∏î‡∏ï‡∏±‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏ö‡∏≤‡∏¢‡∏ö‡πà‡∏≠‡∏¢‡πÑ‡∏´‡∏°? ü§ï",
    category: "somatic",
  },
  {
    question: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏±‡πâ‡∏¢? üò©",
    category: "somatic",
  },
  {
    question: "‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏ö‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏°‡∏±‡πâ‡∏¢? ü§í",
    category: "somatic",
  },
  {
    question: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏õ‡∏•‡∏Å ‡πÜ ‡πÅ‡∏ï‡πà‡∏´‡∏°‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡∏°‡∏±‡πâ‡∏¢ üß™",
    category: "somatic",
  },
  {
    question: "‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏á‡πà‡∏≤‡∏¢ ‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡∏ö‡πà‡∏≠‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏°‡∏±‡πâ‡∏¢? üò∞",
    category: "anxietyAndInsomnia",
  },
  {
    question: "‡∏ô‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏ö ‡∏ï‡∏∑‡πà‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏î‡∏∂‡∏Å ‡∏ù‡∏±‡∏ô‡∏£‡πâ‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏û‡∏ß‡∏Å‡∏ô‡∏µ‡πâ‡∏ö‡πà‡∏≠‡∏¢? üò¥",
    category: "anxietyAndInsomnia",
  },
  {
    question: "‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏Ç ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Å‡∏£‡∏∞‡∏™‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏™‡πà‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ? üòµ‚Äçüí´",
    category: "anxietyAndInsomnia",
  },
  {
    question: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡πÅ‡∏ß‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ö‡πâ‡∏≤‡∏á‡∏°‡∏±‡πâ‡∏¢? üò®",
    category: "anxietyAndInsomnia",
  },
  {
    question: "‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏ö‡∏≤‡∏¢‡πÜ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°? ü§î",
    category: "socialDysfunction",
  },
  {
    question: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏±‡πâ‡∏¢? üìö",
    category: "socialDysfunction",
  },
  {
    question: "‡∏ó‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ä‡πâ‡∏≤‡∏•‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÑ‡∏´‡∏°? üí™",
    category: "socialDysfunction",
  },
  {
    question: "‡∏¢‡∏±‡∏á‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å enjoy ‡∏Å‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏ß‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà? üòä",
    category: "socialDysfunction",
  },
  {
    question: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ï‡∏¥‡∏î ‡πÜ ‡∏Å‡∏±‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡∏°‡∏±‡πâ‡∏¢? üòî",
    category: "severeDepression",
  },
  {
    question:
      "‡πÄ‡∏Ñ‡∏¢‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏°‡∏±‡πâ‡∏¢? üí≠",
    category: "severeDepression",
  },
  {
    question: "‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏°‡∏±‡πâ‡∏¢? üñ§",
    category: "severeDepression",
  },
  {
    question: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏°‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏á‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤? üåßÔ∏è",
    category: "severeDepression",
  },
];

const Diagnosis = (props) => {
  const navigation = useNavigation<StackNavigation>();
  const symptomList = [];
  const [conclusionsVisible, setConclusionsVisible] = useState<boolean>(false);
  const [conclusion, setConclusion] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const screenIndex: number = diagnosisData.screenIndex;
  const screenType: screenType = diagnosisData.screenType[screenIndex];
  const userUid = useSelector<RootState>((state) => state.authentication.uid);
  const userInfo = useSelector<RootState, { birthday: string }>(
    (state) => state.authentication.userInformation as { birthday: string }
  );
  const dispatch = useDispatch<any>();

  logDiagnosisData();

  const nextScreen = (nextScreenType: screenType) => {
    diagnosisData.screenType.push(nextScreenType);
    diagnosisData.screenIndex++;

    props.navigation.push("diagnosis");
  };

  const resetDiagnosisData = () => {
    diagnosisData = {
      screenIndex: 0,
      screenType: ["diagnosisIntro"],
      options: [],
      optionsSettings: { checklist: false, header: "", subheader: "" },
      latestQuestion: "",
      scoring: {
        somatic: 0,
        anxietyAndInsomnia: 0,
        socialDysfunction: 0,
        severeDepression: 0,
      },
    };
  };

  const jumpToConclusions = () => {
    dispatch(
      conclusionActions.setDisplayConclusion({
        diagnosisData: diagnosisData,
      })
    );

    resetDiagnosisData();
    setLoading(true);
    setTimeout(() => {
      resetDiagnosisData();

      navigation.navigate("conclusions");
      setLoading(false);
    }, 2000);
  };

  const onContinue = () => {
    nextScreen("customOptions");
    createMentalHealthQuestion(
      "‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß ‡∏õ‡∏ß‡∏î‡∏ï‡∏±‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡∏ö‡∏≤‡∏¢‡∏ö‡πà‡∏≠‡∏¢‡πÑ‡∏´‡∏°? ü§ï",
      false
    );
  };

  const createCustomOptions = ({
    header,
    subheader,
    options,
    nextDiagnosisPage,
    checklist = false,
  }) => {
    diagnosisData.options = options;
    options.at(-1).question = header;
    diagnosisData.optionsSettings = {
      checklist,
      header,
      subheader,
    };
    diagnosisData.latestQuestion = header;

    if (nextDiagnosisPage) nextScreen("customOptions");
  };

  const createMentalHealthQuestion = (question, nextDiagnosisPage = true) => {
    createCustomOptions({
      header: question,
      subheader: "",
      nextDiagnosisPage: nextDiagnosisPage,
      checklist: false,
      options: [
        { name: "üôÖ‚Äç‚ôÇÔ∏è ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏¢", value: 0 },
        { name: "üíÅ‚Äç‚ôÇÔ∏è ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°", value: 1 },
        { name: "üôÇ‚Äç‚ÜïÔ∏è ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", value: 2 },
        { name: "üôã‚Äç‚ôÇÔ∏è ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏°‡∏≤‡∏Å", value: 3 },
      ],
    });
  };

  const handleCustomOptionPress = (
    option: diagnosisOption,
    headerText: string
  ) => {
    option.question = headerText;

    const latest = { question: diagnosisData.latestQuestion };

    if (screenIndex !== 16) {
      diagnosisData.scoring[ghq28Questions[screenIndex]["category"]] +=
        option.value;
      createMentalHealthQuestion(ghq28Questions[screenIndex]["question"]);
    } else {
      jumpToConclusions();
    }
  };

  const displayScreenType = (type) => {
    if (loading)
      return (
        <View style={{ justifyContent: "center", alignItems: "center" }}>
          <LottieView
            source={require("../../assets/animations/findingAnimation.json")}
            style={{ width: 400, height: 400 }}
            autoPlay
          />
        </View>
      );

    switch (type) {
      case "diagnosisIntro":
        return <DiagnosisIntro onContinue={onContinue} />;
      case "customOptions":
        return (
          <SelectOptions
            optionsList={diagnosisData.options}
            optionsSettings={diagnosisData.optionsSettings}
            onOptionPress={handleCustomOptionPress}
          />
        );
      default:
    }
  };

  return (
    <ErrorBoundary fallback={<Text>404</Text>}>
      <RootContainer>
        <Modal
          visible={conclusionsVisible}
          presentationStyle="pageSheet"
          animationType="slide"
        >
          <Conclusions conclusionId={conclusion} />
        </Modal>
        {displayScreenType(screenType)}

        <CustomButton
          style={s.backButton}
          onPress={() => {
            Alert.alert(
              "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ",
              "‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏õ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á",
              [
                {
                  text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                  onPress: () => {
                    navigation.popToTop();
                    resetDiagnosisData();
                  },
                },
                {
                  text: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πà‡∏≠",
                  style: "cancel",
                },
              ]
            );
          }}
        >
          <Text style={{ fontFamily: Fonts.regular }}>‡∏≠‡∏≠‡∏Å</Text>
        </CustomButton>

        <View
          style={[s.progressBar, { width: `${(screenIndex / 16) * 100}%` }]}
        />
      </RootContainer>
    </ErrorBoundary>
  );
};

const s = StyleSheet.create({
  headerText: {
    fontSize: 40,
    fontFamily: Fonts.regular,
  },
  headerDescriptionText: {
    fontSize: 15,
    fontFamily: Fonts.regular,
    marginBottom: 10,
  },

  backButton: {
    position: "absolute",
    bottom: 30,
    left: 30,
    backgroundColor: "#fdfdfd",
    padding: 20,
    borderRadius: 20,
    shadowColor: "black",
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 6,
    shadowOpacity: 0.25,
  },
  loadingText: {
    fontFamily: Fonts.regular,
  },
  progressBar: {
    height: 5,
    backgroundColor: "#5271ff",
    position: "absolute",
    borderTopRightRadius: 10,
    borderBottomRightRadius: 10,
    top: 0,
    left: 0,
  },
});

export default Diagnosis;
